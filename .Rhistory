n = 40
lambda = 0.2
## 2. Run Simulations
meanDistributions = NULL
for (i in 1 : simulations) meanDistributions = c(meanDistributions, mean(rexp(n, lambda)))
## 1. Initialize the environment
library(ggplot2)
## 2. Calculate Sample Mean
sampleMean=mean(meanDistributions)
## 3. Calculate Theoretical Mean
theoreticalMean = 1/lambda
## 4. Build Mean Data Frame
meanDF <- data.frame(meanTitles=c("Sample Mean", "Theoretical Mean"), meanValues=c(sampleMean, theoreticalMean))
## 5. Generate a histogram to show Sample and Theoritical Mean
ggplot(NULL, aes(x=meanDistributions)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA, binwidth=.2) +
geom_density(color="blue") +
geom_vline(data=meanDF, aes(xintercept=meanValues, linetype=meanTitles,colour=meanTitles),show_guide = TRUE)
+     geom_vline(data=meanDF, aes(xintercept=meanValues, linetype=meanTitles,colour=meanTitles),show_guide = TRUE)
## 5. Generate a histogram to show Sample and Theoritical Mean
ggplot(NULL, aes(x=meanDistributions)) +
ggplot(data = means, aes(x = x)) +
geom_histogram(aes(y=..density..), fill = I('#00e6fa'),
binwidth = 0.20, color = I('black')) +
stat_function(fun = dnorm, arg = list(mean = 5, sd = sd(means$x)))
install.packages("devtools")
library(plotly)
py <- plotly(username="r_user_guide", key="mw5isa4yqp")  # open plotly connection
gg <- ggplot(cars) + geom_point(aes(speed, dist))
py$ggplotly(gg)
?hist()
hist(means)
means
class(means)
hist(means$x)
hist(means$x, col=blue)
hist(means$x, col=blues9)
library(ToothGrowth)
library("ToothGrowth")
data("ToothGrowth")
summary("ToothGrowth")
names(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
ToothGrowth$len
std(ToothGrowth$len)
sd(ToothGrowth$len)
mean(ToothGrowth$len)
mean(ToothGrowth$len) + c(1,-1)*qnorm(0.975)*sd(ToothGrowth$len)
mean(ToothGrowth$len) + c(-1,1)*qnorm(0.975)*sd(ToothGrowth$len)
mean(ToothGrowth$dose)
mean(ToothGrowth$supp)
plot(ToothGrowth$len, ToothGrowth$supp)
hist(ToothGrowth$len, ToothGrowth$supp)
hist(ToothGrowth$len)
hist(ToothGrowth$supp)
hist(ToothGrowth$dose)
table(ToothGrowth$dose, ToothGrowth$supp)
class(ToothGrowth)
ncol(ToothGrowth)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)
geom_bar(stat="identity",)
facet_grid(. ~ supp)
xlab(Dose)
ylab(Length)
guides(fill=guide_legend(title="Type of Supp")))
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(ToothGrowth$dose), y=ToothGrowth$len, fill=ToothGrowth$supp)
geom_bar(stat="identity",)
facet_grid(. ~ supp)
xlab(Dose)
ylab(Length)
guides(fill=guide_legend(title="Type of Supp")))
columns <- aggregate(len ~ dose + supp, ToothGrowth, mean)
?ggplot()
?aes()
ggplot(columns, aes(x=dose, y=len, fill=supp))
ggplot(columns, aes(x=dose, y=len, fill=supp))
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3)
xlab("Dose") ylab("Lengths") guides(fill=guide_legend(title="Type of Supp"))
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp"))
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)
geom_bar(stat="identity",)
facet_grid(. ~ supp)
xlab(Dose)
ylab(Length)
guides(fill=guide_legend(title="Type of Supp")))
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab(Dose) +
ylab(Length) +
guides(fill=guide_legend(title="Type of Supp")))
columns <- aggregate(len ~ dose + supp, ToothGrowth, mean)
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp")) +
scale_color_manual(values = c("#CC0000", "#000099"))
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp")) +
scale_colour_manual(values = c("#CC0000", "#000099"))
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp")) +
scale_colour_manual(values = c("darkblue", "#E69FOO"))
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp")) +
scale_colour_manual(values = c("darkblue", "#E69FOO"))
ggplot(columns, aes(x=dose, y=len, fill=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths")
ggplot(columns, aes(x=dose, y=len, color=supp)) +
geom_line(size=2, alpha=.5) + geom_point(size=5, alpha=.3) +
xlab("Dose") + ylab("Lengths") + guides(fill=guide_legend(title="Type of Supp")) +
scale_colour_manual(values = c("blues9", "#E69FOO"))
?scale_color_manual
table(ToothGrowth$len, ToothGrowth$supp)
table(ToothGrowth$dose, ToothGrowth$supp, ToothGrowth$len)
table(ToothGrowth$dose, mean(ToothGrowth$supp), mean(ToothGrowth$len))
?ddply()
t.test(ToothGrowth$len)
t.test(len~dose, paired=FALSE, var.equal=TRUE,)
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(0.5, 1.0, 2.0) $ supp == 'OJ'))
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(0.5, 1.0, 2.0) & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(0.5, 1.0, 2.0) & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(1.0, 2.0) & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(0.5) & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose %in% c(0.5, 1.0) & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=TRUE, data=subset(ToothGrowth, dose == 0.5 & supp == 'OJ'))
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth, dose == 0.5 & supp == 'OJ'))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth, dose == 0.5 & supp == 'OJ'))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,supp == 'OJ'))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,dose == 2.0))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,dose == 1.0))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,dose == 0.5))
t.test(len ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,dose == 0.5))$conf.int
t.test(len ~ dose, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth,supp == 'OJ'))$conf.int
t.test(dose ~ supp, paired=FALSE, var.equal=FALSE, data=subset(ToothGrowth))$conf.int
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pm)
quantile(ppm)
boxplot(ppm, blue)
boxplot(ppm, col = blue)
?boxplot()
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug
rug(ppm)
low
high
hist(ppm col = "green", breaks = 100)
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd=2)
abline(v= meadian(ppm), col = "magenta", lwd=4)
abline(v= median(ppm), col = "magenta", lwd=4)
names(pollution)
reg <- table(pollution$regiom)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east subset(pollution, region = "east")
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist( subset(pollution, region == "west")$pm25, col = "green")
plot
with(pollution, plot(latitude, pm25))
plot(pollution$lattitude, pollution$pm25)
abline(h=12, lwd=2, lty=2)
plot(pollution$lattitude, pollution$pm25, col = pollution$region)
plot(pollution$lattitude, ppm, col = pollution$region)
plot(pollution$lattitude, ppm, col = "pollution$region")
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
east <- subset(pollution, region == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region, state, layout = c(4,1))
xyplot(Life.Exp~Income|region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot("displ", "hwy", data = mpg)
qplot(displ, hwy, data = mpg)
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm == TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- airquality$Month$5
may <- airquality$Month
may <- subset(airquality, Month==5)
plot(may$Wind, may$Ozone, pch = 17)
plot(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month !=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(c(17,8), c("blue", "red"), c("May", "Other Months"))
?legend
legend("topright", pch = c(17,8), col = c("blue", "red"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
lines(lty=2)
?lines()
lines(airquality$Wind, lty=2)
library(swirl)
swirl()
abline(airquality$Wind, lty=2)
abline(median(airquality$Wind), lty=2)
abline(median(airquality$Wind), lty=2, lwd = 2)
abline(airquality$Wind, lty=2, lwd = 2)
lines(airquality$Wind, lty=2, lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, title(main="Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma =
| c(0, 0, 2, 0))
par(mfrow = c(1, 3) mar = c(4, 4, 2, 1) oma = c(0, 0, 2, 0))
par(mfrow = c(1, 3) ,mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
?Devices
with(data = faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
library(swirl)
swirl()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, grom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, displ~hwy)
g <- ggplot(mpg$displ, mpg$hwy)
?ggplot()
g <- ggplot(mpg, aes(displ,hwy))
summary(g)
g+geom_point()
geom)smooth(g+geom_point())
geom_smooth(g+geom_point())
g+geom_point(geom_smooth())
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(aes(color=drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color=drv), size = 2, alpha = 1/2)+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, typle = "l", ylim=c(-3,3))
plot(myx, myy, type = "l", ylim=c(-3,3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line(0)
g+geom_line()
g+geom_line()+ylim_(-3,3)
?geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+cood_cartesian(ylim = c(-3,3))
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, ninwidth = 18497/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) +
| geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(dataset = diamonds, aes(depth, price))
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/3)
quantile(diamonds$carat, seq(0,1, length = 4),na.rm = TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g+geom_point(alpha = 1/3)+facet_grid(cut ~ car2)
diamonds[myd]
diamonds[myd,]
g+geom_point(alpha = 1/3)+facet_grid(cut ~ car2)+geom_smooth((method = "lm", size = 3, color = "pink"))
g+geom_point(alpha = 1/3)+facet_grid(cut ~ car2)+geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
1
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?par()
?splom()
library(datasets)
data(airquality)
library(ggplot2)
library(ggplot2movies)
library("ggplot2movies")
?trellis.par.set()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
class(hc)
class(distxy)
plot(hc, as.dendrogram(hc))
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=.4, col = "red")
plot(as.dendrogram(hc))
abline(h=.4, col = "red")
abline(h=.4, col = "red")
abline(h=1.5, col = "blue")
4
5
abline(h=.05, col = "green")
12
abline(h=.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
dim(ssd)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist()
mdist(x, y, cx, cy)
applt(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, pch = 9, cex = 2, col = cols1, lwd = 2)
kmeans(dataFrame, centers = 3)
km0bj$iter
kmObj$iter
plot(x, y col = kmObj$cluster, pch = 19, cex = 2)
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*diag*t(matv)
matu%*%diag%*%t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
heas(constantMatrix)
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd1$u*svd1$v*svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] %*% svd1$d[1]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2]
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2]
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, "subject" == 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(cv[1:6])
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(maxCon)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
setwd("~/Desktop/RepData_PeerAssessment1")
?knit2html()
knit2html()
setwd("~/Desktop/RepData_PeerAssessment1")
